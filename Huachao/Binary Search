#33. Search in Rotated Sorted Array
https://leetcode.com/problems/search-in-rotated-sorted-array/description/

code: (very ugly, needs refining)
class Solution {
public:
    int search(vector<int>& nums, int target) {
        if (nums.size() == 0) return - 1;
        if (nums.size() <= 2){
            for (int i = 0; i < nums.size(); i++){
                if (nums[i] == target) return i;
            }
            return -1;
        }
                
        // find the pivot
        int lo = 0; 
        int hi = nums.size()-2;
        int last = nums[hi+1];
        while (lo + 1 < hi){
            int mid = (lo + hi) / 2;
            if (nums[mid] > last){
                lo = mid;
            }
            else{
                hi = mid;
            }
        }
        
        cout<<lo<<hi;
        int pivotIdx = -1;
        
        if (lo > 0 &&  nums[lo - 1] > nums[lo]) pivotIdx = lo - 1;
        if (nums[lo] > nums[lo + 1])  pivotIdx = lo;
        if (nums[hi] > nums[hi + 1])  pivotIdx = hi;
        cout<<pivotIdx;
        // find the target
        if (pivotIdx == -1){
            lo = 0;
            hi = nums.size() - 1;
        }else if (target <= last){
            lo = pivotIdx + 1;
            hi = nums.size()-1;
        }
        else{
            lo = 0;
            hi = pivotIdx;
        }
        
        cout<<endl<<lo<<hi;
        
        while (lo + 1 < hi){
            int mid = (lo + hi) / 2;
            if (nums[mid] > target){
                hi = mid;
            }
            else{
                lo = mid;
            }
        }
        
        if (nums[lo] == target) return lo;
        if (nums[hi] == target) return hi;
        
        return -1;
        
    }
};

#34. Find First and Last Position of Element in Sorted Array
https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/

Code: (wordy code)
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if (nums.size() == 0) return {-1,-1};
        
        int left = -1, right = -1;
        
        // find the right one;
        int lo = 0;
        int hi = nums.size()-1;
        while (lo < hi - 1){
            int mid = (lo + hi) / 2;
            (nums[mid] > target) ? hi = mid : lo = mid;
        }
        
        if (nums[hi] == target) {
            right = hi;
        }else{
            if (nums[lo] == target) right = lo;
        }
                
        // find the left one;
        lo = 0;
        hi = nums.size()-1;
        while (lo < hi - 1){
            int mid = (lo + hi)/2;
            (nums[mid] < target) ? lo = mid : hi = mid;
        }
        
        if (nums[lo] == target) {
            left = lo;
        }else{
            if (nums[hi] == target) left = hi;
        }
        
        return {left,right};
    }
};

##35. Search Insert Position
https://leetcode.com/problems/search-insert-position/description/

Code: (using map)
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        map<int,int> bsMap;
        for (int i = 0; i < nums.size(); i++){
            bsMap.insert({nums[i],i});
        }
                
        map<int,int>::iterator it = bsMap.lower_bound(target);
        if (it==bsMap.end()) return nums.size();
        return it->second;
    }
};

#74. Search a 2D Matrix
https://leetcode.com/problems/search-a-2d-matrix/description/

Code: Why my code is so ugly
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if (matrix.size() == 0) return false;
        if (matrix[0].size() == 0) return false;
        
        // find row
        int lo = 0; 
        int hi = matrix.size()-1;
        while (lo < hi -1){
            int mid = (lo + hi) / 2;
            if (matrix[mid][0] > target){
                hi = mid;
            }
            else{
                lo = mid;
            }
        }
        
        int row;
        if (matrix[hi][0] <= target) {
            row = hi;
        }else{
            row = lo;
        }
        
        // find col
        lo = 0; hi = matrix[row].size()-1;
        while(lo < hi - 1){
            int mid = (lo + hi) / 2;
            if (matrix[row][mid] > target){
                hi = mid;
            }else{
                lo = mid;
            }
        }
        
        return (matrix[row][hi] == target) || (matrix[row][lo] == target);
    }
};

#81. Search in Rotated Sorted Array II
https://leetcode.com/problems/search-in-rotated-sorted-array-ii/description/

Code: Not mine, copying
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int left = 0, right =  nums.size()-1, mid;
        
        while(left<=right)
        {
            mid = (left + right) >> 1;
            if(nums[mid] == target) return true;

            if( (nums[left] == nums[mid]) && (nums[right] == nums[mid]) ) {++left; --right;}

            else if(nums[left] <= nums[mid])
            {
                if( (nums[left]<=target) && (nums[mid] > target) ) right = mid-1;
                else left = mid + 1; 
            }
            else
            {
                if((nums[mid] < target) &&  (nums[right] >= target) ) left = mid+1;
                else right = mid-1;
            }
        }
        return false;
    }
};

#153. Find Minimum in Rotated Sorted Array
https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/

Code:
class Solution {
public:
    int findMin(vector<int>& nums) {
        int lo = 0, hi = nums.size()-1;
        while(lo<hi){
            if (nums[lo] < nums[hi]) return nums[lo];
            
            int mid = (lo+hi)/2;
            if (nums[mid]>=nums[hi]) lo = mid+1;
            else hi = mid;
        }
        
        return nums[lo];
    }
};

#154. Find Minimum in Rotated Sorted Array II
https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/description/

Code:
class Solution {
public:
    int findMin(vector<int>& nums) {
        int lo = 0, hi = nums.size()-1;
        while(lo < hi){
            if (nums[lo] < nums[hi]) return nums[lo];
            int mid = (lo + hi) / 2;
            if (nums[mid] > nums[hi]) lo = mid + 1;
            else if (nums[mid] < nums[hi]) hi = mid;
            else hi--;
        }
        return nums[lo];
    }
};

#62. Find Peak Element
https://leetcode.com/problems/find-peak-element/description/

Code:
class Solution {
public:
    int findPeakElement(vector<int>& nums) {                
        int low = 0;
        int high = nums.size()-1;
        
        while(low < high)
        {
            int mid1 = (low+high)/2;
            int mid2 = mid1+1;
            if(nums[mid1] < nums[mid2])
                low = mid2;
            else
                high = mid1;
        }
        return low;
    }
    
    
};

#240. Search a 2D Matrix II
https://leetcode.com/problems/search-a-2d-matrix-ii/description/

Code:
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if (matrix.size() == 0 || matrix[0].size() == 0) return false;
        
        int i = 0; 
        int j = matrix[0].size()-1;
        int row = matrix.size();
        int col = matrix[0].size();
        while(i<row && j>=0){
            if (matrix[i][j] == target) return true;
            else if (matrix[i][j] > target) j--;
            else i++;
        }
        return false;
    }

};

#278. First Bad Version
https://leetcode.com/problems/first-bad-version/description/

Code:
// Forward declaration of isBadVersion API.
bool isBadVersion(int version);

class Solution {
public:
    int firstBadVersion(int n) {
        int lo = 1;
        int hi = n;
        while (lo < hi-1){
            int mid = ((long)lo + (long)hi) / 2;
            if (isBadVersion(mid)){
                hi = mid;
            }
            else{
                lo = mid;
            }
        }
        
        return isBadVersion(lo) ? lo : hi;
    }
};
