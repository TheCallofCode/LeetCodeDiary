#2 Add Two Numbers
https://leetcode.com/problems/add-two-numbers/description/

Code: 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode preHead(0), *p = &preHead;
        int preVal = 0;
        while (l1||l2||preVal){
            int sum = (l1?l1->val:0) + (l2?l2->val:0) + preVal;
            preVal = sum/10;
            p->next = new ListNode(sum%10);
            p = p->next;
            l1 = l1?l1->next:l1;
            l2 = l2?l2->next:l2;
        }
        return preHead.next;
    }
};
Comment: clean the code

#21. Merge Two Sorted Lists
https://leetcode.com/problems/merge-two-sorted-lists/description/

Code:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode preHead(0), *p = &preHead;
        while(l1||l2){
            int newVal = 0;
            if (!l2 || (l1 && l1->val < l2->val)){
                newVal = l1->val;
                l1 = l1->next;
            }else {
                newVal = l2->val;
                l2 = l2->next;
            }
            p->next = new ListNode(newVal);
            p = p->next;
        }
        
        return preHead.next;
    }
};

#23. Merge k Sorted Lists

code:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    class compare{
        public:
        bool operator()(const ListNode* lhs, const ListNode* rhs){
            return lhs->val > rhs->val;
        }
    };
    
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<ListNode*, vector<ListNode*>, compare> minHeap;
        ListNode preHead(0), *pNow = &preHead;
        for (auto m:lists){
            if (m) minHeap.push(m);
        }
        
        while(!minHeap.empty()){
            ListNode* node = minHeap.top();
            pNow->next = new ListNode(node->val);
            minHeap.pop();
            if (node&&node->next) minHeap.push(node->next);
            pNow = pNow->next;
        }
        return preHead.next;
    }
};

注意priority_queue的应用，尤其compare


#24. Swap Nodes in Pairs

Code:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode *preHead, *p1 = head, *p2;
        
        if (head && head->next) head=head->next;
        
        while (p1&&p1->next){
            p2 = p1->next;
            p1->next = p2->next;
            p2->next = p1;
            
            p2 = p1->next;
            if (p1->next && p1->next->next) p1->next = p1->next->next;
            p1 = p2;
        }
        
        return head;
    }
};


#25. Reverse Nodes in k-Group

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if (!head) return NULL;
        
        ListNode *preHead=new ListNode(0), *pLastK=head, *pRes, *cur=head,*next=head,*tmp;
        int num = 1; 
        while(cur=cur->next) num++;
        preHead->next = head;
        pRes=preHead;
        while (num>=k){
            cur = head;
            if (cur) next = cur->next;
            
            for (int i = 0; i < k-1; i++){
                tmp = next->next;
                next->next = cur;
                cur = next;
                next = tmp;
            }
            preHead->next = cur;
            head->next = next;
            preHead = head;
            head = next;
            num -= k;
        }
        return pRes->next;
    }
};
返回结果里有 loop 也会造成超时


#138. Copy List with Random Pointer

/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        if (!head) return NULL;
        
        RandomListNode *newHead,*l2,*l1;
        for (l1=head; l1;l1 = l1->next->next){
            l2 = new RandomListNode(l1->label);
            l2->next = l1->next;
            l1->next = l2;            
        }
        
        newHead = head->next;
        
        for (l1=head;l1&&l1->next;l1=l1->next->next){
            if (l1->random) l1->next->random = l1->random->next;
        }
        
        for (l1=head;l1;l1=l1->next){
            l2 = l1->next;
            if (l2) l1->next = l2->next;
            if (l2->next) l2->next = l2->next->next;
        }
        
        
        return newHead;
    }
};

关键：新链和旧链联系在一起

141. Linked List Cycle

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode* fast = head;
        ListNode* slow = head;
        while (fast && fast->next){
            fast = fast->next->next;
            slow = slow->next;
            
            if (fast == slow) return true;
        }
        
        return false;
    }
};

双指针
双指针快慢指针

142. Linked List Cycle II

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* fast = head;
        ListNode* slow = head;
        while(fast && fast->next){
            fast = fast->next->next;
            slow = slow->next;
            
            if (fast == slow){
                fast = head;
                while (fast != slow){
                    fast = fast->next;
                    slow = slow->next;
                }
                return slow;
            }
        }
        return NULL;
    }
};
龟兔赛跑


143. Reorder List

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode* head) {
        if(!head) return;
        
        // find mid
        ListNode *fast = head, *slow = head, *next,*tmp;
        while(fast&&fast->next){
            slow = slow->next;fast = fast->next->next;
        }
        
        // reverse slow to end
        next = slow->next;
        slow->next = NULL;
        while (slow&&next){
            tmp = next->next;
            next->next = slow;
            slow = next;
            next = tmp;
        }
        
        fast = head;
        while (fast&&slow&&fast->next){
            tmp = fast->next;
            fast->next = slow;
            slow = slow->next;
            fast->next->next = tmp;
            fast = tmp;            
        }
        if (fast->next) fast->next = NULL;
        return;
    }
};

把一个简单的例子，先分析清楚。

206. Reverse Linked List

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if (!head) return NULL;
        
        ListNode *cur=head,*next,*tmp;
        
        if(cur) next = cur->next;
        while(next){
            tmp = next->next;
            next->next = cur;
            cur = next;
            next = tmp;
        }
        head->next = NULL;
        return cur;
    }
};
