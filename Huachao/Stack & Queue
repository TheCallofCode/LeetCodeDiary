144. Binary Tree Preorder Traversal

Given a binary tree, return the preorder traversal of its nodes' values.

Code: 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<TreeNode*> nodeStack;
        while (root || !nodeStack.empty()){
            if (root) {
                res.push_back(root->val);
                nodeStack.push(root);
                root = root->left;
            }
            else{
                TreeNode* top = nodeStack.top();
                nodeStack.pop();
                if (top->right){
                    root = top->right;
                }
            }            
            
        }
        
        return res;
    }
};

145. Binary Tree Postorder Traversal

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<TreeNode*> myStack;
        TreeNode* last = NULL;
        while(root || !myStack.empty()){
            if (root){
                if (root->left){
                    myStack.push(root);
                    root = root->left;
                }
                else if (root->right){                    
                    myStack.push(root);
                    root = root->right;
                }
                else{
                    res.push_back(root->val);
                    last = root;
                    root = NULL;
                }
            }
            else{
                TreeNode* top = myStack.top();                
                if (top->right && top->right != last){
                    root = top->right;
                }
                else{
                    res.push_back(top->val);
                    last = top;
                    myStack.pop();
                }
            }
        }
        
        return res;
    }
};


150. Evaluate Reverse Polish Notation

Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Note:

Division between two integers should truncate toward zero.
The given RPN expression is always valid. That means the expression would always evaluate to a result and there won't be any divide by zero operation.
Example 1:

Input: ["2", "1", "+", "3", "*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: ["4", "13", "5", "/", "+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6

class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int> myStack;
        for(auto s:tokens){
            if ((s[0] >= '0' && s[0] <='9') || (s[0] == '-' && s.size() > 1)){
                myStack.push(std::stoi(s));
            }
            else{
                if (myStack.size()<2) return -1; // error
                
                int b = myStack.top();myStack.pop();
                int a = myStack.top();myStack.pop();
                int c = 0;
                switch (s[0]){
                    case '+':
                        c = a + b;
                        break;
                    case '-':
                        c = a - b;
                        break;
                    case '*':
                        c = a * b;
                        break;
                    case '/':
                        c = a / b;
                        break;
                }
                
                myStack.push(c);
            }
        }
        
        return myStack.top();
    }
};


class MyStack {
private:
    queue<int> _queue;
    
public:
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        _queue.push(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int res = _queue.back();
                    
        int n = _queue.size();
        for (int i = 0; i < n; i++){
            if (i < n - 1) _queue.push(_queue.front());
            _queue.pop();
        }
        
        return res;
    }
    
    /** Get the top element. */
    int top() {
        return _queue.back();
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return _queue.empty();
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * bool param_4 = obj.empty();
 */
 
 class MyStack {
private:
    queue<int> _queue;
    
public:
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        _queue.push(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        
        int res = _queue.back();
        queue<int> _new;
            
        int n = _queue.size();
        for (int i = 0; i < n; i++){
            if (i < n - 1) _new.push(_queue.front());
            _queue.pop();
        }
        
        for (int i = 0; i < n-1; i++){
            _queue.push(_new.front());
            _new.pop();
        }
        
        return res;
    }
    
    /** Get the top element. */
    int top() {
        return _queue.back();
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return _queue.empty();
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * bool param_4 = obj.empty();
 */
 
 155. Min Stack
DescriptionHintsSubmissionsDiscussSolution
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.

 class MinStack {
    stack<int> s,mn;
public:
    /** initialize your data structure here. */
    MinStack() {
        
    }
    
    void push(int x) {
        s.push(x);
        if (mn.empty() || mn.top()>=x){
            mn.push(x);
        }
    }
    
    void pop() {
        int t = s.top();
        s.pop();
        if (!mn.empty() && mn.top() == t){
            mn.pop();
        }
    }
    
    int top() {
        return s.top();
    }
    
    int getMin() {
        return mn.top();
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
