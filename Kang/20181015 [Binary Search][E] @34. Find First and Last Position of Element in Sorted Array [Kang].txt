34. Find First and Last Position of Element in Sorted Array

Description:
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.
Your algorithm's runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].
Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Hints:

Code:
class Solution:
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        res = [-1,-1]
        left = 0
        right = len(nums) - 1
        while left < right:
            mid = left + (right-left)//2
            if nums[mid] < target:
                left = mid+1
            else:
                right = mid
        if left == len(nums) or nums[left] != target:
            return res
        res[0] = left     
        left = 0
        right = len(nums)
        while left < right:
            mid = left + (right-left)//2
            if nums[mid] <= target:
                left = mid+1
            else:
                right = mid
        res[1] = left-1
        return res

Performance:
Time Complaxity: O(logn), Space Complaxity: O(1)  Beats: 95%