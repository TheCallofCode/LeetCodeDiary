74. Search a 2D Matrix

Description:
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:
Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true
Example 2:
Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false

Hints:

Code:
class Solution:
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        if len(matrix) == 0 or len(matrix[0]) == 0:
            return False
        up = 0
        down = len(matrix)-1        
        left = 0
        right = len(matrix[0])-1
        while up < down:
            row =  up + (down - up)//2
            if( target < matrix[row][0]):
                down = row
            elif(target <= matrix[row][right]):
                up = row
                break
            else:
                up = row+1
        row = up
        while left < right:
            col = left + (right-left)//2
            if ( target < matrix[row][col] ):
                right = col
            elif ( target == matrix[row][col] ):
                return True
            else:
                left = col+1
        if( target == matrix[row][left] ):
            return True
        else:
            return False

Performance:
Time Complaxity: O(logn), Space Complaxity: O(1)  Beats: 31%

Code:
class Solution:
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        if not matrix: return False
        m, n = len(matrix), len(matrix[0])
        left, right = 0, m*n-1
        while left <= right:
            mid = (left+right)//2
            i, j = mid//n, mid % n   
            if matrix[i][j] == target:
                return True
            if matrix[i][j] < target:
                left = mid+1
            elif matrix[i][j] > target:
                right = mid-1
        return False

Performance:
Time Complaxity: O(logn), Space Complaxity: O(1)  Beats: 100%