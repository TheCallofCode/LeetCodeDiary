153. Find Minimum in Rotated Sorted Array

Description:
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).
Find the minimum element.
You may assume no duplicate exists in the array.
Example 1:
Input: [3,4,5,1,2] 
Output: 1
Example 2:
Input: [4,5,6,7,0,1,2]
Output: 0

Hints:

Code:
class Solution:
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        left = 0
        right = len(nums)-1
        while left < right:
            mid = left+(right-left)//2
            if(nums[mid] > nums[right]):
                left =mid+1
            else:
                right = mid
        return nums[left]

Performance:
Time Complaxity: O(logn), Space Complaxity: O(1)  Beats: 37%

Code:
class Solution:
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        begin = 0
        end = len(nums) - 1
        while begin + 1 < end:
            mid = (begin + end) // 2
            if nums[begin] < nums[mid] and nums[mid] < nums[end]:
                break
            if nums[begin] < nums[mid]:
                begin = mid + 1
            else:
                end = mid
        return min(nums[begin], nums[end])

Performance:
Time Complaxity: O(logn), Space Complaxity: O(1)  Beats: 100%