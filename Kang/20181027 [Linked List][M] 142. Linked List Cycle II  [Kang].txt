142. Linked List Cycle II

Description:
Given a linked list, return the node where the cycle begins. If there is no cycle, return null.
Note: Do not modify the linked list.
Follow up:
Can you solve it without using extra space?

Hints:
2 pointers, check the ini state when slow=head

Code:
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head:
            return None
        fast,slow = head,head
        while fast.next:
            fast = fast.next.next
            slow = slow.next
            if not fast or not slow:
                return None
            elif fast == slow:
                slow = head
                while(1):
                    if fast==slow:
                        return fast                 
                    fast = fast.next
                    slow = slow.next
        return None
        
Performance:
Time Complaxity: O(N), Space Complaxity: O(1)  Beats: 50%