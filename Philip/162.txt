162. Find Peak Element

Description:
A peak element is an element that is greater than its neighbors.

Given an input array nums, where nums[i] ¡Ù nums[i+1], find a peak element and return its index.

The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.

You may imagine that nums[-1] = nums[n] = -¡Þ.

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 1 or 5 
Explanation: Your function can return either index number 1 where the peak element is 2, 
             or index number 5 where the peak element is 6.
Note:

Your solution should be in logarithmic complexity.


Hints:
Binary Search can be used to find local hill by narrow down range when low > mid || high > mid.  

Code:
public class Solution {
    public int findPeakElement(int[] nums) {
        if(nums.length == 0)
            return 0;
        if(nums.length == 1)
            return 0;
    	int mid = 0, low = 0, high = nums.length - 1;
        while(low < high)
        {
            mid = low + (high - low) / 2;
            if(nums[mid] < nums[high])
                low = mid + 1;
            else if(nums[mid] < nums[low])
                high = mid - 1;
            else
            {
                if(mid != low) low ++;
                if(mid != high) high --;
            }
        }
        return low;
    }
}

Performance:
Space Complexity 1, Time Complexity O(log(n)), beats 99%


Hints:
This algorithm find local hill by narrow down range by comparing mid and mid + 1. 
If mid < mid + 1, [mid + 1, .. ] is the ascending part of the hill.  
If mid < mid + 1, [.. , mid] is the descending part of the hill.

Code:
class Solution {
    public int findPeakElement(int[] nums){
        if(nums.length==0) return 0;
        int s = 0;
        int e = nums.length-1;
        while(s<e){
            int mid = s + (e-s)/2;
            if(nums[mid]>nums[mid+1]) e = mid;
            else s = mid+1;
        }
        return s;
    }
}

Performance:
Space Complexity 1, Time Complexity O(log(n)), beats 99%
