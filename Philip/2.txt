2. Add Two Numbers

Description:

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.


Hints:
this kind of problems are not hard but for this problem you need to think about carry bit for single digit add.

Also remember the carry bit after finishing the loop.

Code:
public class Solution {
	public ListNode addTwoNumbers(ListNode l1, ListNode l2)
	{
		int sum = 0;
		ListNode head  = new ListNode(0);
		ListNode pointer = head;

		while(l1 != null || l2 != null)
		{
			sum /= 10;
			if(l1 != null){ 
				sum += l1.val;
				l1 = l1.next;
			}
			if(l2 != null) {
				sum += l2.val;
				l2 = l2.next;
			}
			pointer.next = new ListNode(sum%10);
			pointer = pointer.next;	

		}
		if(sum/10 != 0) 
			pointer.next = new ListNode(1);
		return head.next;
	}	

}

Performance:
O(n) O(n) beats 40%
