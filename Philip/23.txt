23. Merge k Sorted Lists

Description:

Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6


Hints:
Just merge, but make sure to merge smaller arrays first

Code:
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
     		int n = lists.length;
		if(n == 0) return null;
		while(n > 1)
		{
			int half = (n+1)/2;
			for(int i = 0; i < half; i ++)
			{
				if(half + i < n)				
					lists[i] = merge(lists[i],lists[half+i]);				
			}
			n = n / 2;
		}   
		return lists[0];
	}
	private ListNode merge(ListNode l1, ListNode l2)
	{
		ListNode head = new ListNode(0);
		ListNode tmp = head;
		while(l1 != null || l2 != null)
		{
			if(l1 == null) {
				tmp.next = l2;
				l2 = l2.next;
			} 
			else if(l2 == null){
				tmp.next = l1;	
				l1 = l1.next;
			}
			else {
				if(l1.val < l2.val)
				{
					tmp.next = l1;
					l1 = l1.next;
				}
				else
				{
					tmp.next = l2;
					l2 = l2.next;
				}
			}
			tmp = tmp.next;
		}
		tmp.next = null;
		return head.next;
	}   
}


Performance:
nlogn, 1, beats 90%