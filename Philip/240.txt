240. Search a 2D Matrix II

Description:
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
Example:

Consider the following matrix:

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.

Given target = 20, return false.

Hints:
Due to the character of this Matrix, we can narrow down the search area easily

Code:
class Solution {
	public boolean searchMatrix(int[][] matrix, int target) {
		int M = matrix.length;
		if(M == 0) return false;
		int N = matrix[0].length;
		if(N == 0) return false;
		int start = 0;
		for(int i = M-1; i >= 0; i --)
		{
				int ind = bsearch(matrix[i],target, start, N-1);
				if(ind >= 0)	return true;
				start = - ind - 1;
                if(start == N) return false;
				//if(newstart < start) return false;
				//end = newend;
		
		}
		return false;
	}
	private int bsearch(int[] nums, int target, int lo, int hi)
	{
		while(lo <= hi)
		{
			int mid = lo + (hi - lo) / 2;
			if(nums[mid] == target) return mid;
			else if(nums[mid] < target) lo = mid + 1;
			else	hi = mid - 1; 
		}
		return - (lo + 1);
	}
}
Performance:
nlogn ?? beats 70%