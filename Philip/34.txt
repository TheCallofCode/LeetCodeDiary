34. Find First and Last Position of Element in Sorted Array

Description:
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Hints:
find the first occuring index of target, then the last occuring index of target.

Code:
class Solution {
	public int[] searchRange(int[] nums, int target) {
        int[] ans  = {-1,-1};
		int low = bsearch1(nums,target);
		if(low >= nums.length || nums[low] != target) return ans;
		int high = bsearch2(nums,target);
        ans[0] = low;
        ans[1] = high - 1;
        return ans;
		
	}
	private int bsearch1(int[] nums, int target)
	{
		int low = 0, high = nums.length-1;
		int mid = 0;
		while(low<high)
		{
			mid = low + (high - low) / 2;
			if(nums[mid] >= target)	high = mid;
			else 			low = mid + 1;
			
		}
        return low;
	}	
	private int bsearch2(int[] nums, int target)
	{
		int low = 0, high = nums.length-1;
		int mid = 0;
		while(low<high)
		{
			mid = low + (high - low) / 2;
			if(nums[mid] > target)	high = mid - 1;
			else			low = mid + 1;

		}
        if(nums[low] == target) low ++;
		return low;
	}
}

Performance:
Time Complexity O(log(n)), Space Complexity O(n), beats 100%.