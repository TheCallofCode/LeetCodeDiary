74. Search a 2D Matrix

Description:
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true
Example 2:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false

Hints:
This is a wiggle sorted array. Just b-search by column, then by row


Code:
public class Solution{
	public boolean searchMatrix(int[][] matrix, int target)
	{
		int M = matrix.length;
		if(M == 0) return false;
		int N = matrix[0].length;
		if(N == 0) return false;
		int lo = 0, hi = M - 1;
		while(lo <= hi)
		{
			int mid = low + (hi - low) / 2;
			if(matrix[mid][0] <= target && matrix[mid][N-1] >= traget) 			
				return Arrays.binarySearch(matirx[mid], target) >= 0;		
			else if(matrix[mid][0] > target)
				hi = mid - 1;
			else 
				low = mid + 1;
			
		}
		return false;
	}	
}

Performance:
Time Complexity logm + logn, Space Complexity 1, beats 98%   