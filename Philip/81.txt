81. Search in Rotated Sorted Array II

Description:
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).

You are given a target value to search. If found in the array return true, otherwise return false.

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
Follow up:

This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.
Would this affect the run-time complexity? How and why?

Hints:
A rotated sorted array looks like this.
  .
 . 
.   
    .
   .   
Again, you need to devide the problem to two parts:
1, determine where is the pit 
2, do binary search
We need to worray about the special cases, when low == mid == hi
Need to be able to visualize the search graph

Code:
class Solution{
	public boolean search(int[] nums, int target) {
		int lo = 0, hi = nums.length - 1;
        //if(hi < 0) return false;
		while(lo <= hi)
		{
			int mid = lo + (hi - lo)/2;
			if(nums[mid] == target) return true;
			if(nums[mid] > nums[hi])
			{
				if(nums[mid] > target && target >= nums[lo]){
					hi = mid - 1;
				}
				else		
					lo = mid + 1;			
			}
			else if(nums[mid] < nums[hi])
			{
				if(nums[mid] < target && target <= nums[hi])
					lo = mid + 1;
				else
					hi = mid - 1; 
			}
			else
				hi --;
		}
		return false;		
	}
}
Performance:
logn, n, beats 99%