33. Search in Rotated Sorted Array

Description:
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Hints:
Need to worry about more than simple bsearch

Code:
public class Solution {
    
	public int search(int[] nums, int target) {

		return bSearchTree(nums, 0, nums.length-1, target);
	}

	public int bSearchTree(int[] nums, int start, int end,int target)

	{
		if (start > end) return -1;

		int mid = (start + end) /2;
		if (nums[mid] == target) return mid;
		if(nums[mid] < nums[end])

		{
			if(nums[mid] < target && nums[end] >= target)

				return bSearchTree(nums, mid+1,end, target);
			else
				return bSearchTree(nums, start, mid-1, target);
		}

            
    if(nums[mid] >= nums[start])

            	{

                	if(nums[mid] > target && nums[start] <= target)

                    		return bSearchTree(nums, start, mid-1, target);

                	else

                    		return bSearchTree(nums, mid+1, end, target);

            	}
        	return -1;


	}
}

Performance:
nlogn