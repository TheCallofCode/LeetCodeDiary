516. Longest Palindromic Subsequence

Step 1
We can determine a palindrome array by comparing the chars starting from front with chars starting from back
then, longest palindromic subsequence means we can remove any char in the sequence
for this question, have combinations:
i [0..n] j [0..n], i < j
but, we don't need to really compare all, we can use a memo to memorise the max palindormic subsequence.

  1 2 3 4
1 1   3   
2   1
3     1 2
4       1

The longest subsequence of a sequence is 
1, 2 + memo[i+1..j-1].
2, memo[i,j-1] || memo[i+1,j]


class solution {
	public int longestPalindromeSubseq(String s) {
		int[][] dp = new int[s.length()][s.length()];
		for(int i = s.length()-1; i >= 0; i --)
		{
			dp[i][i] = 1;
			for(int j = i+1; j < s.length(); j ++)
			{
				if(s.charAt(i) == s.charAt(j))
					dp[i][j] = dp[i+1][j-1] + 2;
				else
					dp[i][j] = Math.max(dp[i][j-1], dp[i+1][j];
			}
		}
		return dp[0][s.length()-1];
	}
}