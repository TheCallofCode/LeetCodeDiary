142. Linked List Cycle II

Description:

Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Note: Do not modify the linked list.

Follow up:
Can you solve it without using extra space?

Hints:
Tortoise and Hare II.

Code:
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow = head, fast = head;
        boolean detected = false;
        while(fast != null && fast.next != null)
        {
            fast = fast.next.next;
            slow = slow.next;
            if(fast == slow)
            {
                detected = true;
                break;
            }
        }
        if(!detected) return null;
        ListNode newslow = head;
        while(newslow != slow)    
        {
            newslow = newslow.next;
            slow = slow.next;
        }
        return slow;
    }
}

Performance:
O(n) O(1) beats 99%