143. Reorder List

Description:

Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

You may not modify the values in the list's nodes, only nodes itself may be changed.

Example 1:

Given 1->2->3->4, reorder it to 1->4->2->3.
Example 2:

Given 1->2->3->4->5, reorder it to 1->5->2->4->3.

Hints:
Two steps, 
1 go to the middle of the list
2 revert list from mid point + 1
3 insert every node of reversed list to the right of node in old list 
 
Code:
class Solution {
    public void reorderList(ListNode head) {
        if(head == null) return;
        ListNode fast = head;
        ListNode slow = head;
        while(fast != null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        ListNode rhead = new ListNode(-1);
        ListNode tmp = slow.next;
        slow.next = null;
        while(tmp != null)
        {
            ListNode prev = rhead.next;
            ListNode next = tmp;
            tmp = tmp.next;
            next.next = prev;
            rhead.next = next;
        }
        tmp = head;
        ListNode rtmp = rhead.next;
        while(tmp!=null)
        {
            ListNode next = tmp.next;
            if(rtmp != null)
            {
                tmp.next = rtmp;
                rtmp = rtmp.next;
                tmp.next.next = next;
            }
            tmp = next;
        }
    }
}

Performance:
O(n) O(1) beats 99%