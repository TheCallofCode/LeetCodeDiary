25. Reverse Nodes in k-Group

Description:
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

Note:

Only constant extra memory is allowed.
You may not alter the values in the list's nodes, only nodes itself may be changed.


Hints:
For this problem, since only constant extra memory is allowed, we can use head and tail,with reverse insert techique.

Code:
class Solution {
	public ListNode reverseKGroup(ListNode head, int k){
		ListNode dummyHead = new ListNode(0);
		ListNode tmp = dummyHead;
		while(head != null)
		{
            ListNode curr = head;
            int i;
            for(i = 0; i < k && curr != null; i ++)
            {
                curr = curr.next;
            }
            if(i < k)
            {
                tmp.next = head;
                head = null;
            }
            else
            {
                ListNode tail = head;
                for(i = 0; i < k ; i ++)
                {
                    ListNode prev = tmp.next;
                    tmp.next = head;
                    head = head.next;
                    tmp.next.next = prev;
                }
                tmp = tail;
            }
		}
		return dummyHead.next;
	}
}

Performance:
O(n) O(1) beats 50%