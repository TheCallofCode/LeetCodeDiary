141. Linked List Cycle

- Description:

Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?

- Hints:

- Code:

public class Solution {
    public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) {
            return false;
        }
        ListNode slow = head, fast = head.next; // when not to find middle node, fast pointer can be at 2nd place
        while (fast != null && fast.next != null) {
            if (slow == fast) {
                return true;
            }
            slow = slow.next;
            fast = fast.next.next;
        }
        return false;
    }
}

Time: O(n)	Space: O(1)	Beats: 100%


