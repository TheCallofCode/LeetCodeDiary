23. Merge k Sorted Lists

- Description:
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6

- Hints:

- Code:

Solution 1: first impression, need extra space

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) {
            return null; // corner case
        }
        if (lists.length == 1) {
            return lists[0]; // base case: merged into one
        }
        int size = lists.length / 2 + lists.length % 2;
        ListNode [] res = new ListNode[size];
        for (int i = 0; i < lists.length; i = i + 2) {
            res[i/2] = merge(lists[i], i + 1 < lists.length ? lists[i+1] : null);
        }
        return mergeKLists(res);
    }
    private ListNode merge(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }
        if (l2 == null) {
            return l1;
        }
        if (l1.val < l2.val) {
            l1.next = merge(l1.next, l2);
            return l1;
        } else {
            l2.next = merge(l1, l2.next);
            return l2;
        }
    }
}


Time: O(n log k)?	Space: O(n log k)?	Beats: 96.18%

Solution 2: try to remove extra space

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) {
            return null;
        }
        if (lists.length == 1) {
            return lists[0];
        }
        int lo = 0, hi = lists.length - 1;
        while (hi > 0) { // loop until hi pointer is on the first list -> only one list left
            while (lo < hi) { // reduce half and merge as much as possible
                lists[lo] = merge(lists[lo], lists[hi]);
                lo++;
                hi--;
            }
            lo = 0; // Very important! reset to start from beginning before next round
        }
        return lists[hi];
    }
    private ListNode merge(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }
        if (l2 == null) {
            return l1;
        }
        if (l1.val < l2.val) {
            l1.next = merge(l1.next, l2);
            return l1;
        } else {
            l2.next = merge(l1, l2.next);
            return l2;
        }
    }
}

Time: O(n log k)?	Space: O(1)	Beats: 81.82%

