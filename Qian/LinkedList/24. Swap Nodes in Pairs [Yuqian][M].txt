24. Swap Nodes in Pairs

- Description:

Given a linked list, swap every two adjacent nodes and return its head.

Example:

Given 1->2->3->4, you should return the list as 2->1->4->3.
Note:

Your algorithm should use only constant extra space.
You may not modify the values in the list's nodes, only nodes itself may be changed.


- Hints:

- Code:
class Solution {
    public ListNode swapPairs(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        // 1 -> 2 -> 3 -> 4 -> null
        ListNode prev = dummy, cur = head, rest = null;
        while (cur != null && cur.next != null) {
            rest = cur.next.next;
            prev.next = cur.next;
            cur.next.next = cur;
            cur.next = rest;
            prev = cur;
            cur = rest;
        }        
        if (rest != null) {
            prev.next = rest;
        }
        return dummy.next;
    }
}

Time: O(n)	Space: O(1)	Beats: 100%


