25. Reverse Nodes in k-Group

- Description:
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

Note:

Only constant extra memory is allowed.
You may not alter the values in the list's nodes, only nodes itself may be changed.

- Hints: Use pointers to set up a range, then reverse nodes in range, in the end connect

- Code:

class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode dummy = new ListNode(0); // create dummy node since I need prev pointer
        dummy.next = head;
        ListNode prev = dummy, cur = head, rest;
        while (cur != null) {
            rest = cur;
            int count = k;
            while (count > 0) { // try to move rest cursor k times to stop at first position of the rest of the list
                if (rest == null) {
                    break;
                }
                rest = rest.next;
                count--;
            }
            if (count > 0) {
                prev.next = cur;
                return dummy.next;
            }
            prev.next = reverse(cur, k);
            cur.next = rest;
            prev = cur;
            cur = rest;
        }
        return dummy.next;
    }
    private ListNode reverse(ListNode cur, int k) {
        if (cur == null || k == 1) { // instead of cur.next == null, we use k == 1 here to reach the last node of reverse list
            return cur;
        }
        ListNode head = reverse(cur.next, k - 1);
        cur.next.next = cur;
        cur.next = null;
        return head;
    }
}

Time: O(k x n / k) = O (n)?	Space: O(1)	Beats: 99.97%


