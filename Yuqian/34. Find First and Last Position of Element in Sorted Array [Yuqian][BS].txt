34. Find First and Last Position of Element in Sorted Array

- Description:
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

- Hints:

- Code:

class Solution {
    private int firstPos(int [] nums, int target) {
        int left = 0, right = nums.length - 1, mid = 0;
        while (left + 1 < right) {
            mid = left + (right - left) / 2;
            if (nums[mid] >= target)    right = mid;
            else    left = mid;
        }
        if (nums[left] == target)   return left;
        if (nums[right] == target)  return right;
        return -1;
    }
    private int lastPos(int [] nums, int target) {
        int left = 0, right = nums.length - 1, mid = 0;
        while (left + 1 < right) {
            mid = left + (right - left) / 2;
            if (nums[mid] > target)    right = mid;
            else    left = mid;
        }
        if (nums[right] == target)  return right;
        if (nums[left] == target)   return left;
        return -1;
    }
    public int[] searchRange(int[] nums, int target) {
        if (nums == null || nums.length == 0)   return new int [] {-1, -1};
        int first = firstPos(nums, target);
        int last = lastPos(nums, target);
        return new int[] {first, last};        
    }
}

- Performance:
Time: O(log n)	Space: O(1)	Beats: 100%


